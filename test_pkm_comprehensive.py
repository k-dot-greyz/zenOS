#!/usr/bin/env python3
"""
Comprehensive test suite for PKM module.
"""

import sys
import asyncio
from pathlib import Path
from datetime import datetime

# Add current directory to path for imports
sys.path.insert(0, '.')

def test_imports():
    """Test that all PKM modules can be imported."""
    print("üß™ Testing PKM module imports...")
    
    try:
        import zen.pkm
        print("‚úÖ Main PKM module imported")
        
        from zen.pkm.config import PKMConfig
        print("‚úÖ PKMConfig imported")
        
        from zen.pkm.models import Conversation, Message, MessageRole, KnowledgeEntry
        print("‚úÖ Data models imported")
        
        from zen.pkm.storage import PKMStorage
        print("‚úÖ PKMStorage imported")
        
        from zen.pkm.extractor import GeminiExtractor
        print("‚úÖ GeminiExtractor imported")
        
        from zen.pkm.processor import ConversationProcessor
        print("‚úÖ ConversationProcessor imported")
        
        from zen.pkm.scheduler import PKMScheduler
        print("‚úÖ PKMScheduler imported")
        
        from zen.pkm.agent import PKMAgent
        print("‚úÖ PKMAgent imported")
        
        from zen.pkm.cli import pkm
        print("‚úÖ PKM CLI imported")
        
        return True
    except Exception as e:
        print(f"‚ùå Import failed: {e}")
        return False


def test_config():
    """Test PKM configuration."""
    print("\nüß™ Testing PKM configuration...")
    
    try:
        from zen.pkm.config import PKMConfig
        
        # Test default config
        config = PKMConfig()
        print(f"‚úÖ Default config created: {config.pkm_dir}")
        
        # Test config serialization
        config_dict = config.to_dict()
        print(f"‚úÖ Config serialized: {len(config_dict)} keys")
        
        # Test config save/load
        test_config_path = Path("test_pkm_config.yaml")
        config.save(test_config_path)
        print("‚úÖ Config saved to file")
        
        loaded_config = PKMConfig.load(test_config_path)
        print("‚úÖ Config loaded from file")
        
        # Cleanup
        test_config_path.unlink()
        print("‚úÖ Test config file cleaned up")
        
        return True
    except Exception as e:
        print(f"‚ùå Config test failed: {e}")
        return False


def test_models():
    """Test data models."""
    print("\nüß™ Testing data models...")
    
    try:
        from zen.pkm.models import Conversation, Message, MessageRole, KnowledgeEntry, ConversationStatus
        
        # Test Message creation
        message = Message(
            role=MessageRole.USER,
            content="Hello, this is a test message",
            timestamp=datetime.now()
        )
        print("‚úÖ Message created")
        
        # Test Conversation creation
        conversation = Conversation(
            id="test-conv-001",
            title="Test Conversation",
            messages=[message],
            created_at=datetime.now(),
            updated_at=datetime.now(),
            status=ConversationStatus.COMPLETED
        )
        print("‚úÖ Conversation created")
        
        # Test serialization
        conv_dict = conversation.to_dict()
        print(f"‚úÖ Conversation serialized: {len(conv_dict)} keys")
        
        # Test deserialization
        conv_restored = Conversation.from_dict(conv_dict)
        print("‚úÖ Conversation deserialized")
        
        # Test KnowledgeEntry
        knowledge = KnowledgeEntry(
            id="kb-001",
            title="Test Knowledge",
            content="This is test knowledge content",
            source_conversation_id="test-conv-001",
            source_message_index=0,
            created_at=datetime.now(),
            updated_at=datetime.now()
        )
        print("‚úÖ KnowledgeEntry created")
        
        return True
    except Exception as e:
        print(f"‚ùå Models test failed: {e}")
        return False


def test_storage():
    """Test storage functionality."""
    print("\nüß™ Testing storage functionality...")
    
    try:
        from zen.pkm.storage import PKMStorage
        from zen.pkm.config import PKMConfig
        from zen.pkm.models import Conversation, Message, MessageRole, ConversationStatus
        
        # Create test config with temp directory
        config = PKMConfig()
        config.pkm_dir = Path("test_pkm_storage")
        
        # Initialize storage
        storage = PKMStorage(config)
        print("‚úÖ PKMStorage initialized")
        
        # Create test conversation
        test_message = Message(
            role=MessageRole.USER,
            content="Test message for storage",
            timestamp=datetime.now()
        )
        
        test_conversation = Conversation(
            id="storage-test-001",
            title="Storage Test Conversation",
            messages=[test_message],
            created_at=datetime.now(),
            updated_at=datetime.now(),
            status=ConversationStatus.COMPLETED
        )
        
        # Test save conversation
        storage.save_conversation(test_conversation)
        print("‚úÖ Conversation saved")
        
        # Test load conversation
        loaded_conv = storage.load_conversation("storage-test-001")
        print("‚úÖ Conversation loaded")
        
        # Test list conversations
        conversations = storage.list_conversations()
        print(f"‚úÖ Listed {len(conversations)} conversations")
        
        # Test search
        search_results = storage.search_conversations("test")
        print(f"‚úÖ Search returned {len(search_results)} results")
        
        # Test statistics
        stats = storage.get_statistics()
        print(f"‚úÖ Statistics: {stats}")
        
        # Cleanup
        import shutil
        shutil.rmtree("test_pkm_storage", ignore_errors=True)
        print("‚úÖ Test storage cleaned up")
        
        return True
    except Exception as e:
        print(f"‚ùå Storage test failed: {e}")
        return False


def test_processor():
    """Test conversation processor."""
    print("\nüß™ Testing conversation processor...")
    
    try:
        from zen.pkm.processor import ConversationProcessor
        from zen.pkm.config import PKMConfig
        from zen.pkm.models import Conversation, Message, MessageRole, ConversationStatus
        
        # Create test config
        config = PKMConfig()
        config.auto_summarize = True
        config.extract_keywords = True
        config.generate_tags = True
        config.pkm_dir = Path("test_pkm_processor")
        
        # Initialize storage and processor
        storage = PKMStorage(config)
        processor = ConversationProcessor(config, storage)
        print("‚úÖ ConversationProcessor initialized")
        
        # Create test conversation
        messages = [
            Message(role=MessageRole.USER, content="What is Python programming?"),
            Message(role=MessageRole.ASSISTANT, content="Python is a high-level programming language known for its simplicity and readability."),
            Message(role=MessageRole.USER, content="Can you give me an example?"),
            Message(role=MessageRole.ASSISTANT, content="Sure! Here's a simple Python example:\n\nprint('Hello, World!')")
        ]
        
        conversation = Conversation(
            id="processor-test-001",
            title="Python Programming Discussion",
            messages=messages,
            created_at=datetime.now(),
            updated_at=datetime.now(),
            status=ConversationStatus.COMPLETED
        )
        
        # Test processing
        processed_conv = processor.process_conversation(conversation)
        print("‚úÖ Conversation processed")
        
        # Check if processing added metadata
        if processed_conv.summary:
            print(f"‚úÖ Summary generated: {len(processed_conv.summary)} chars")
        
        if processed_conv.keywords:
            print(f"‚úÖ Keywords extracted: {processed_conv.keywords}")
        
        if processed_conv.tags:
            print(f"‚úÖ Tags generated: {processed_conv.tags}")
        
        return True
    except Exception as e:
        print(f"‚ùå Processor test failed: {e}")
        return False


def test_scheduler():
    """Test scheduler functionality."""
    print("\nüß™ Testing scheduler functionality...")
    
    try:
        from zen.pkm.scheduler import PKMScheduler
        from zen.pkm.config import PKMConfig
        
        # Create test config
        config = PKMConfig()
        config.cron_enabled = True
        
        # Initialize scheduler
        scheduler = PKMScheduler(config)
        print("‚úÖ PKMScheduler initialized")
        
        # Test job registration
        def test_job():
            print("Test job executed")
        
        scheduler.register_job("test_job", test_job, "*/1 * * * *")  # Every minute
        print("‚úÖ Test job registered")
        
        # Test job listing
        jobs = scheduler.list_jobs()
        print(f"‚úÖ Listed {len(jobs)} jobs")
        
        # Test job removal
        scheduler.remove_job("test_job")
        print("‚úÖ Test job removed")
        
        return True
    except Exception as e:
        print(f"‚ùå Scheduler test failed: {e}")
        return False


def test_agent():
    """Test PKM agent."""
    print("\nüß™ Testing PKM agent...")
    
    try:
        from zen.pkm.agent import PKMAgent
        
        # Initialize agent
        agent = PKMAgent()
        print("‚úÖ PKMAgent initialized")
        
        # Test agent manifest
        manifest = agent.manifest
        print(f"‚úÖ Agent manifest: {manifest.name} - {manifest.description}")
        
        # Test agent execution (without actual extraction)
        test_prompt = "Show me my conversation statistics"
        result = agent.execute(test_prompt, {})
        print("‚úÖ Agent executed successfully")
        
        return True
    except Exception as e:
        print(f"‚ùå Agent test failed: {e}")
        return False


def test_cli():
    """Test CLI functionality."""
    print("\nüß™ Testing CLI functionality...")
    
    try:
        from zen.pkm.cli import pkm
        import click.testing
        
        # Test CLI group creation
        runner = click.testing.CliRunner()
        result = runner.invoke(pkm, ['--help'])
        
        if result.exit_code == 0:
            print("‚úÖ PKM CLI help command works")
        else:
            print(f"‚ùå PKM CLI help failed: {result.output}")
            return False
        
        # Test individual commands
        commands = ['extract', 'process', 'search', 'list', 'stats', 'export', 'schedule']
        
        for cmd in commands:
            result = runner.invoke(pkm, [cmd, '--help'])
            if result.exit_code == 0:
                print(f"‚úÖ PKM CLI {cmd} command available")
            else:
                print(f"‚ùå PKM CLI {cmd} command failed")
                return False
        
        return True
    except Exception as e:
        print(f"‚ùå CLI test failed: {e}")
        return False


async def test_async_functionality():
    """Test async functionality."""
    print("\nüß™ Testing async functionality...")
    
    try:
        from zen.pkm.extractor import GeminiExtractor
        from zen.pkm.config import PKMConfig
        
        # Create test config
        config = PKMConfig()
        
        # Test async context manager
        async with GeminiExtractor(config) as extractor:
            print("‚úÖ GeminiExtractor async context manager works")
        
        return True
    except Exception as e:
        print(f"‚ùå Async test failed: {e}")
        return False


def main():
    """Run all tests."""
    print("PKM Module Comprehensive Test Suite")
    print("=" * 50)
    
    tests = [
        ("Imports", test_imports),
        ("Configuration", test_config),
        ("Data Models", test_models),
        ("Storage", test_storage),
        ("Processor", test_processor),
        ("Scheduler", test_scheduler),
        ("Agent", test_agent),
        ("CLI", test_cli),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå {test_name} test failed")
        except Exception as e:
            print(f"‚ùå {test_name} test crashed: {e}")
    
    # Test async functionality
    try:
        if asyncio.run(test_async_functionality()):
            passed += 1
        else:
            print("‚ùå Async functionality test failed")
    except Exception as e:
        print(f"‚ùå Async functionality test crashed: {e}")
    
    total += 1
    
    print("\n" + "=" * 50)
    print(f"Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("All tests passed! PKM module is ready to use.")
        return True
    else:
        print("Some tests failed. Check the output above.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
