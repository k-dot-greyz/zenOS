# This workflow will install Python dependencies, run tests and lint with multiple Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest black isort mypy bandit coverage pytest-cov safety pip-audit mkdocs pre-commit
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    # Optional: Run pre-commit checks
    - name: Run pre-commit checks
      run: |
        pre-commit run --all-files
      continue-on-error: true
    
    - name: Format check with black
      run: |
        black --check .
    
    - name: Import sorting check with isort
      run: |
        isort --check-only .
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        mypy .
      continue-on-error: true
    
    - name: Security check with bandit
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Check for known security vulnerabilities with safety
      run: |
        safety check
      continue-on-error: true
    
    - name: Audit dependencies with pip-audit
      run: |
        pip-audit
      continue-on-error: true
    
    - name: Build documentation with mkdocs
      run: |
        mkdocs build
    
    - name: Test with pytest and coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
    
    # Optional: Upload coverage reports
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
      continue-on-error: true
